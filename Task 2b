// ======= Pin Definitions =======
#define ENA 18 // PWM pin to control motor speed
#define IN1 16 // Motor direction pin 1
#define IN2 17 // Motor direction pin 2
#define encoderA 34 // Encoder A (must support interrupt)
#define encoderB 35 // Encoder B (optional if using only one edge)

// === Encoder and Target ===
volatile long encoderCount = 0;
const int targetCounts = 150; // ~45 degrees (124=90 degrees)
const float tolerance = 3; // Increased tolerance for more stable stopping

// === PID Parameters ===
float kp = 1.5;    // Reduced from 2.5
float ki = 0.05;   // Drastically reduced from 260
float kd = 0.8;    // Reduced from 2.0

// === PID Variables ===
float previousError = 0;
float integral = 0;
const float maxIntegral = 50.0; // Anti-windup limit
unsigned long lastTime = 0;
const int maxPWM = 200; // Limiting max PWM to prevent aggressive movements

// === Control Variables ===
bool targetReached = false;
unsigned long stabilityTimer = 0;
const unsigned long stabilityDelay = 500; // Time motor needs to be within tolerance

// === Forward declaration ===
void IRAM_ATTR readEncoder();

// === Setup ===
void setup() {
  Serial.begin(115200);

  // Configure motor pins
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);

  // Configure encoder pins with pull-ups
  pinMode(encoderA, INPUT_PULLUP);
  pinMode(encoderB, INPUT_PULLUP);

  // Attach interrupt for encoder
  attachInterrupt(digitalPinToInterrupt(encoderA), readEncoder, RISING);

  // Initialize timing
  lastTime = millis();

  // Initial motor state (stopped)
  setMotor(0);

  Serial.println("Motor PID Control System");
  Serial.println("Target position: " + String(targetCounts) + " counts");
  delay(1000); // Brief pause before starting
}

// === Encoder ISR ===
void IRAM_ATTR readEncoder() {
  // Read B channel to determine direction
  int b = digitalRead(encoderB);
  encoderCount += (b == HIGH) ? 1 : -1;
}

// === Reset Encoder Count ===
void resetEncoder() {
  encoderCount = 0;
  integral = 0;
  previousError = 0;
  Serial.println("Encoder reset to zero");
}

// === Set Motor ===
void setMotor(int pwm) {
  // Constrain PWM value
  pwm = constrain(pwm, -maxPWM, maxPWM);

  if (pwm > 0) {
    // Forward direction
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, pwm);
  } else if (pwm < 0) {
    // Reverse direction
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, -pwm);
  } else {
    // Stop motor
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, 0);
  }
}

// === Main Loop with PID ===
void loop() {
  unsigned long now = millis();
  float dt = (now - lastTime) / 1000.0;

  // Ensure dt is reasonable (prevent division by very small numbers)
  if (dt < 0.001) dt = 0.001;

  lastTime = now;

  // Calculate error
  float error = targetCounts - encoderCount;

  // Check if we're at target position
  if (abs(error) <= tolerance) {
    if (!targetReached) {
      stabilityTimer = millis();
      targetReached = true;
    }

    // Ensure motor stays at position for stabilityDelay ms
    if (millis() - stabilityTimer >= stabilityDelay) {
      setMotor(0);
      Serial.println("Target position reached and stable");
      delay(100);  // Small delay to prevent rapid serial output
      return;
    }
  } else {
    // Reset if we drift outside tolerance
    targetReached = false;
  }

  // PID calculations
  // P term
  float pTerm = kp * error;

  // I term with anti-windup
  integral += error * dt;
  integral = constrain(integral, -maxIntegral, maxIntegral);
  float iTerm = ki * integral;

  // D term with filtering
  float derivative = (error - previousError) / dt;
  float dTerm = kd * derivative;

  // Calculate total output
  float output = pTerm + iTerm + dTerm;

  // Update previous error
  previousError = error;

  // Apply control signal
  setMotor(output);

  // Debug output
  Serial.print(millis());
  Serial.print(" -> Encoder: ");
  Serial.print(encoderCount);
  Serial.print(" | Error: ");
  Serial.print(error);
  Serial.print(" | P: ");
  Serial.print(pTerm);
  Serial.print(" | I: ");
  Serial.print(iTerm);
  Serial.print(" | D: ");
  Serial.print(dTerm);
  Serial.print(" | PWM: ");
  Serial.println(output);

  delay(10); // Short delay for stability

  // Optional: Reset encoder if user sends 'r' over serial
  if (Serial.available()) {
    char cmd = Serial.read();
    if (cmd == 'r') {
      resetEncoder();
    }
  }
}
